// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import UIKit;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

SWIFT_CLASS("_TtC14PlayformSDK_TV14ActivationInfo")
@interface ActivationInfo : NSObject
@property (nonatomic, copy) NSString * _Nullable userCode;
@property (nonatomic, copy) NSString * _Nullable verificationUrl;
/// Allows client to initial the instance.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP14PlayformSDK_TV22CommonViewEventHandler_")
@protocol CommonViewEventHandler
@end

@protocol ActivationViewListener;

SWIFT_PROTOCOL("_TtP14PlayformSDK_TV26ActivationViewEventHandler_")
@protocol ActivationViewEventHandler <CommonViewEventHandler>
@property (nonatomic, strong) id <ActivationViewListener> _Nullable activationViewListener;
- (void)onReceiveActivationInfoWithActivationInfo:(ActivationInfo * _Nonnull)activationInfo;
- (void)onDismissActivationView;
@end

enum ViewType : NSInteger;
@class NSBundle;
@class NSCoder;

SWIFT_CLASS("_TtC14PlayformSDK_TV24ActivationViewController")
@interface ActivationViewController : UIViewController <ActivationViewEventHandler>
@property (nonatomic, strong) id <ActivationViewListener> _Nullable activationViewListener;
@property (nonatomic) enum ViewType viewType;
- (void)onReceiveActivationInfoWithActivationInfo:(ActivationInfo * _Nonnull)activationInfo;
- (void)onDismissActivationView;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_PROTOCOL("_TtP14PlayformSDK_TV18CommonViewListener_")
@protocol CommonViewListener
- (void)onClickedBackWithListener:(id <CommonViewListener> _Nullable)listener;
@end


SWIFT_PROTOCOL("_TtP14PlayformSDK_TV22ActivationViewListener_")
@protocol ActivationViewListener <CommonViewListener>
@property (nonatomic, strong) id <ActivationViewEventHandler> _Nullable activationViewEventHandler;
- (void)onClickedGetANewCode;
@end




/// This class defines several codes of general error types
SWIFT_CLASS("_TtC14PlayformSDK_TV10ERROR_CODE")
@interface ERROR_CODE : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger UNABLE_TO_CONNECT_INTERNET;)
+ (NSInteger)UNABLE_TO_CONNECT_INTERNET SWIFT_WARN_UNUSED_RESULT;
+ (void)setUNABLE_TO_CONNECT_INTERNET:(NSInteger)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger MISSING_PARAMETER;)
+ (NSInteger)MISSING_PARAMETER SWIFT_WARN_UNUSED_RESULT;
+ (void)setMISSING_PARAMETER:(NSInteger)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger HTTP_RESPONSE_DATA_ERROR;)
+ (NSInteger)HTTP_RESPONSE_DATA_ERROR SWIFT_WARN_UNUSED_RESULT;
+ (void)setHTTP_RESPONSE_DATA_ERROR:(NSInteger)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger PARSE_JSON_FAIL;)
+ (NSInteger)PARSE_JSON_FAIL SWIFT_WARN_UNUSED_RESULT;
+ (void)setPARSE_JSON_FAIL:(NSInteger)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger USER_CANCELED;)
+ (NSInteger)USER_CANCELED SWIFT_WARN_UNUSED_RESULT;
+ (void)setUSER_CANCELED:(NSInteger)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger UNABLE_TO_CREATE_END_POINT;)
+ (NSInteger)UNABLE_TO_CREATE_END_POINT SWIFT_WARN_UNUSED_RESULT;
+ (void)setUNABLE_TO_CREATE_END_POINT:(NSInteger)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger INVALID_CALLBACK_URL;)
+ (NSInteger)INVALID_CALLBACK_URL SWIFT_WARN_UNUSED_RESULT;
+ (void)setINVALID_CALLBACK_URL:(NSInteger)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger MISSSING_BUNDLE;)
+ (NSInteger)MISSSING_BUNDLE SWIFT_WARN_UNUSED_RESULT;
+ (void)setMISSSING_BUNDLE:(NSInteger)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger INVALID_ENVIRONMENT;)
+ (NSInteger)INVALID_ENVIRONMENT SWIFT_WARN_UNUSED_RESULT;
+ (void)setINVALID_ENVIRONMENT:(NSInteger)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger AUTHORIZE_FAIL;)
+ (NSInteger)AUTHORIZE_FAIL SWIFT_WARN_UNUSED_RESULT;
+ (void)setAUTHORIZE_FAIL:(NSInteger)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger PERMISSION_DENY;)
+ (NSInteger)PERMISSION_DENY SWIFT_WARN_UNUSED_RESULT;
+ (void)setPERMISSION_DENY:(NSInteger)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger UNKNOWN_ERROR;)
+ (NSInteger)UNKNOWN_ERROR SWIFT_WARN_UNUSED_RESULT;
+ (void)setUNKNOWN_ERROR:(NSInteger)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger PROCESS_INTERRUPTED;)
+ (NSInteger)PROCESS_INTERRUPTED SWIFT_WARN_UNUSED_RESULT;
+ (void)setPROCESS_INTERRUPTED:(NSInteger)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger MISSSING_BUNDLE_ID;)
+ (NSInteger)MISSSING_BUNDLE_ID SWIFT_WARN_UNUSED_RESULT;
+ (void)setMISSSING_BUNDLE_ID:(NSInteger)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger MISSSING_APP_ID_PREFIX;)
+ (NSInteger)MISSSING_APP_ID_PREFIX SWIFT_WARN_UNUSED_RESULT;
+ (void)setMISSSING_APP_ID_PREFIX:(NSInteger)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger GET_ACCESS_TOKEN_FAIL;)
+ (NSInteger)GET_ACCESS_TOKEN_FAIL SWIFT_WARN_UNUSED_RESULT;
+ (void)setGET_ACCESS_TOKEN_FAIL:(NSInteger)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger GET_USER_KEY_FAIL;)
+ (NSInteger)GET_USER_KEY_FAIL SWIFT_WARN_UNUSED_RESULT;
+ (void)setGET_USER_KEY_FAIL:(NSInteger)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger PROCESS_STATE_NOT_IDLE;)
+ (NSInteger)PROCESS_STATE_NOT_IDLE SWIFT_WARN_UNUSED_RESULT;
+ (void)setPROCESS_STATE_NOT_IDLE:(NSInteger)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger USER_CODE_TIME_OUT;)
+ (NSInteger)USER_CODE_TIME_OUT SWIFT_WARN_UNUSED_RESULT;
+ (void)setUSER_CODE_TIME_OUT:(NSInteger)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger TERMS_UPDATE;)
+ (NSInteger)TERMS_UPDATE SWIFT_WARN_UNUSED_RESULT;
+ (void)setTERMS_UPDATE:(NSInteger)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14PlayformSDK_TV8EnumTool")
@interface EnumTool : NSObject
+ (NSString * _Nonnull)textForCustomViewType:(enum ViewType)viewType SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)titleForCustomViewType:(enum ViewType)viewType SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)descriptionForCustomViewType:(enum ViewType)viewType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class KidProfile;

/// This class contains the child profile (KidProfile).
SWIFT_CLASS("_TtC14PlayformSDK_TV10KidAccount")
@interface KidAccount : NSObject
/// Kid Profile
@property (nonatomic, strong) KidProfile * _Nullable kidProfile;
/// Allows client to initial the instance.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class contains general information about child.
SWIFT_CLASS("_TtC14PlayformSDK_TV10KidProfile")
@interface KidProfile : NSObject
/// Nickname
@property (nonatomic, copy) NSString * _Nullable nickName;
/// Gender
@property (nonatomic, copy) NSString * _Nullable gender;
/// Avatar (URL)
@property (nonatomic, copy) NSString * _Nullable avatarUrl;
/// Allows client to initial the instance.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface NSObject (SWIFT_EXTENSION(PlayformSDK_TV))
@end

@class UIApplication;

/// PlayformManager initializes this environment data object.
/// <blockquote>
/// <em>NOTE</em>: Developers should check all the parameters prior to execution.
///
/// </blockquote>
SWIFT_CLASS("_TtC14PlayformSDK_TV19PlayformEnvironment")
@interface PlayformEnvironment : NSObject
/// This property is the required parameter to initialize the PlayformSDK service.
@property (nonatomic, strong) UIApplication * _Nullable application;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable dataStoreScopes;
@property (nonatomic, copy) NSDictionary<NSString *, id <CommonViewEventHandler>> * _Nullable customViewDictionary;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class is the main controller of the PlayformSDK.
SWIFT_CLASS("_TtC14PlayformSDK_TV15PlayformManager")
@interface PlayformManager : NSObject <ActivationViewListener>
@property (nonatomic, strong) id <ActivationViewEventHandler> _Nullable activationViewEventHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// Client must call this function to PlayformManager in <em>didFinishLaunchingWithOptions</em>
/// instance method.
/// <blockquote>
/// <em>NOTE</em>: The <em>didFinishLaunchingWithOptions</em> function included in <em>AppDelegate</em>
///
/// </blockquote>
/// \param env PlayformEnvironment
///
///
/// returns:
/// return Boolean
+ (BOOL)initializeWithEnv:(PlayformEnvironment * _Nonnull)env SWIFT_WARN_UNUSED_RESULT;
/// This function allows clients to sign out of the account.
/// \param onSuccess onSuccess closure
///
/// \param onError return Error
///
+ (void)signOutOnSuccess:(void (^ _Nonnull)(void))onSuccess onError:(void (^ _Nonnull)(NSError * _Nonnull))onError;
/// This function allows clients to trigger the sign in process.
/// \param onSuccess onSuccess closure
///
/// \param onError return Error
///
+ (void)signInWithOtherDeviceOnSuccess:(void (^ _Nonnull)(void))onSuccess onError:(void (^ _Nonnull)(NSError * _Nonnull))onError;
/// This function allows clients to trigger the sign in process.
/// \param onSuccess onSuccess closure
///
/// \param onError return Error
///
+ (void)silentSignInOnSuccess:(void (^ _Nonnull)(void))onSuccess onError:(void (^ _Nonnull)(NSError * _Nonnull))onError;
/// This function allows clients to check for any pending legal agreements.
/// \param onSuccess success closure
///
/// \param onError error closure
///
+ (void)checkPendingLegalAgreementsOnSuccess:(void (^ _Nonnull)(void))onSuccess onError:(void (^ _Nonnull)(NSError * _Nonnull))onError;
/// This function registers a device token on the Playform Server to allow the
/// Playform service to send push notification messages to that device.
/// \param deviceToken Device Token
///
+ (void)registerNotificationServiceWithDeviceToken:(NSData * _Nonnull)deviceToken;
/// When you receive a notification message which contains a “playform-sync” key,
/// you must pass the payload to the Playform SDK with this function. This function
/// performs a blocking process that will display views and interact with the end
/// user. You should interrupt user interaction gracefully before invoking this function.
/// \param dataMessage Data Message (userInfo)
///
+ (void)onSyncNotificationWithDataMessage:(NSDictionary * _Nonnull)dataMessage;
/// When you receive a notification message which contains a “playform-async” key,
/// you must pass the payload to the Playform SDK with this function. This function
/// performs a non-blocking process that will execute some background tasks. You may
/// invoke this function immediately after receiving the notification, as it will not
/// interrupt user interaction.
/// \param dataMessage Data Message (userInfo)
///
+ (void)onAsyncNotificationWithDataMessage:(NSDictionary * _Nonnull)dataMessage;
/// This action checks if the current user can sign in automatically.
/// \param onSuccess expiration date String in unix time.
///
/// \param onError return Error
///
+ (void)checkUserAccessValidationOnSuccess:(void (^ _Nonnull)(NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSError * _Nonnull))onError;
- (void)onClickedBackWithListener:(id <CommonViewListener> _Nullable)listener;
- (void)onClickedGetANewCode;
@end


SWIFT_PROTOCOL("_TtP14PlayformSDK_TV12PlayformView_")
@protocol PlayformView
@property (nonatomic, strong) id <ActivationViewEventHandler> _Nullable activationViewEventHandler;
- (void)showActivationViewWithActivateUrl:(NSString * _Nonnull)activateUrl activationCode:(NSString * _Nonnull)activationCode listener:(id <ActivationViewListener> _Nonnull)listener;
- (void)showActivationViewWithErrorWithActivateUrl:(NSString * _Nonnull)activateUrl activationCode:(NSString * _Nonnull)activationCode listener:(id <ActivationViewListener> _Nonnull)listener error:(NSError * _Nonnull)error;
- (void)dismissActivationView;
@end


@interface UIApplication (SWIFT_EXTENSION(PlayformSDK_TV))
@end


@interface UIColor (SWIFT_EXTENSION(PlayformSDK_TV))
@end


@interface UIDevice (SWIFT_EXTENSION(PlayformSDK_TV))
@property (nonatomic, readonly, copy) NSString * _Nonnull modelName;
@end


@interface UIViewController (SWIFT_EXTENSION(PlayformSDK_TV))
@property (nonatomic, copy) NSString * _Null_unspecified tag;
@end

@class UserProfile;

/// This class allows clients to fetch user information.
SWIFT_CLASS("_TtC14PlayformSDK_TV11UserManager")
@interface UserManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// This function enables clients to fetch user profiles.
/// \param onSuccess return UserProfile
///
/// \param onError return Error
///
+ (void)getUserProfileOnSuccess:(void (^ _Nonnull)(UserProfile * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSError * _Nonnull))onError;
/// This function enables clients to update user profiles.
/// \param profile UserProfile
///
/// \param onSuccess return UserProfile
///
/// \param onError return Error
///
+ (void)updateUserProfileWithProfile:(UserProfile * _Nonnull)profile onSuccess:(void (^ _Nonnull)(UserProfile * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSError * _Nonnull))onError;
/// This function enables clients to fetch kid accounts.
/// \param onSuccess return the array of KidAcount
///
/// \param onError return Error
///
+ (void)getKidAccountListOnSuccess:(void (^ _Nonnull)(NSArray<KidAccount *> * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSError * _Nonnull))onError;
/// This function enables clients to create new kid accounts.
/// \param kidProfile KidProfile
///
/// \param onSuccess return KidAccount
///
/// \param onError return Error
///
+ (void)createKidAccountWithKidProfile:(KidProfile * _Nonnull)kidProfile onSuccess:(void (^ _Nonnull)(KidAccount * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSError * _Nonnull))onError;
/// This function enables clients to update kid profiles.
/// \param kidAccount KidAccount
///
/// \param onSuccess return KidAccount
///
/// \param onError return Error
///
+ (void)updateKidProfileWithKidAccount:(KidAccount * _Nonnull)kidAccount onSuccess:(void (^ _Nonnull)(KidAccount * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSError * _Nonnull))onError;
/// This function enables clients to delete a kid account.
/// \param kidAccount KidAccount
///
/// \param onSuccess Success completion block
///
/// \param onError Error completion block
///
+ (void)deleteKidAccountWithKidAccount:(KidAccount * _Nonnull)kidAccount onSuccess:(void (^ _Nonnull)(void))onSuccess onError:(void (^ _Nonnull)(NSError * _Nonnull))onError;
/// This function enables clients to request a verification email.
/// \param onSuccess Success completion block
///
/// \param onError Error completion block
///
+ (void)sendVerificationMailOnSuccess:(void (^ _Nonnull)(void))onSuccess onError:(void (^ _Nonnull)(NSError * _Nonnull))onError;
/// This function enables clients to store custom data for each user in a hierarchical manner.
/// The path uses commas to separate data items in the hierarchical structure.
/// \param scope Scope
///
/// \param path Path
///
/// \param value Value
///
/// \param onSuccess Success completion block
///
/// \param onError Error completion block
///
+ (void)addUserDataWithScope:(NSString * _Nonnull)scope path:(NSString * _Nonnull)path value:(NSString * _Nonnull)value onSuccess:(void (^ _Nonnull)(NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSError * _Nonnull))onError;
/// This function enables clients to retrieve all immediate subpath values at a specified path
/// in a hierarchical structure of custom data. It uses commas as path separators in the hierarchical
/// structure. If a path is not specified, the API will return all values in the user’s root path.
/// \param scope Scope
///
/// \param path Path
///
/// \param onSuccess Success completion block
///
/// \param onError Error completion block
///
+ (void)getAllUserDataWithScope:(NSString * _Nonnull)scope path:(NSString * _Nonnull)path onSuccess:(void (^ _Nonnull)(NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSError * _Nonnull))onError;
/// This function enables clients to retrieve all n-level subpath values at a specified path
/// in a hierarchical structure of custom data.
/// \param scope Scope
///
/// \param path Path
///
/// \param depth Depth
///
/// \param onSuccess Success completion block
///
/// \param onError Error completion block
///
+ (void)getUserDataWithScope:(NSString * _Nonnull)scope path:(NSString * _Nonnull)path depth:(NSInteger)depth onSuccess:(void (^ _Nonnull)(NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSError * _Nonnull))onError;
/// This function enables clients to delete all subpath values for a specified path.
/// If a path is not specified, the API will delete all subpath values in the user’s root path.
/// \param scope Scope
///
/// \param path Path
///
/// \param onSuccess Success completion block
///
/// \param onError Error comepletion block
///
+ (void)deleteUserDataWithScope:(NSString * _Nonnull)scope path:(NSString * _Nonnull)path onSuccess:(void (^ _Nonnull)(void))onSuccess onError:(void (^ _Nonnull)(NSError * _Nonnull))onError;
/// This function enables clients to set an avatar, which is a photo in user profile and get back the url of the image.
/// \param data Data
///
/// \param onSuccess return avatarUrl
///
/// \param onError Error comepletion block
///
+ (void)setUserAvatarWithData:(NSData * _Nonnull)data onSuccess:(void (^ _Nonnull)(NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSError * _Nonnull))onError;
/// This function enables clients to set an avatar of a kid, which is a photo in kid profile and get back the url of the image.
/// \param kidAccount KidAccount
///
/// \param data Data
///
/// \param onSuccess return avatarUrl
///
/// \param onError Error comepletion block
///
+ (void)setKidAvatarWithKidAccount:(KidAccount * _Nonnull)kidAccount data:(NSData * _Nonnull)data onSuccess:(void (^ _Nonnull)(NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSError * _Nonnull))onError;
@end

@class UserProfilePhone;
@class UserProfileEmail;
@class UserProfileAddress;

/// This class contains general user information.
SWIFT_CLASS("_TtC14PlayformSDK_TV11UserProfile")
@interface UserProfile : NSObject
/// Nickname
@property (nonatomic, copy) NSString * _Nullable nickName;
/// First name
@property (nonatomic, copy) NSString * _Nullable firstName;
/// Last name
@property (nonatomic, copy) NSString * _Nullable lastName;
/// Middle name
@property (nonatomic, copy) NSString * _Nullable middleName;
/// Avatar (URL)
@property (nonatomic, copy) NSString * _Nullable avatarUrl;
/// List of phone numbers
@property (nonatomic, copy) NSArray<UserProfilePhone *> * _Nullable phones;
/// List of email addresses
@property (nonatomic, copy) NSArray<UserProfileEmail *> * _Nullable emails;
/// List of addresses
@property (nonatomic, copy) NSArray<UserProfileAddress *> * _Nullable addresses;
/// Country
@property (nonatomic, copy) NSString * _Nullable country;
/// Language
@property (nonatomic, copy) NSString * _Nullable language;
/// Time zone
@property (nonatomic, copy) NSString * _Nullable timeZone;
/// Gender
@property (nonatomic, copy) NSString * _Nullable gender;
/// Birth Day
@property (nonatomic) NSInteger dayOfBirth;
/// Birth Month
@property (nonatomic) NSInteger monthOfBirth;
/// Birth Year
@property (nonatomic) NSInteger yearOfBirth;
/// Allows client to initial the instance.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class contains the user address.
SWIFT_CLASS("_TtC14PlayformSDK_TV18UserProfileAddress")
@interface UserProfileAddress : NSObject
/// Address type
@property (nonatomic, copy) NSString * _Nullable addressType;
/// First address line
@property (nonatomic, copy) NSString * _Nullable firstAddressLine;
/// Second address line
@property (nonatomic, copy) NSString * _Nullable secondAddressLine;
/// City
@property (nonatomic, copy) NSString * _Nullable city;
/// State
@property (nonatomic, copy) NSString * _Nullable state;
/// Zipcode
@property (nonatomic, copy) NSString * _Nullable zipCode;
/// Country
@property (nonatomic, copy) NSString * _Nullable country;
/// County
@property (nonatomic, copy) NSString * _Nullable county;
/// This boolean value flags the current address as the primary address or not.
@property (nonatomic) BOOL isPrimary;
/// Allows client to initial the instance.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class contains the user email address.
SWIFT_CLASS("_TtC14PlayformSDK_TV16UserProfileEmail")
@interface UserProfileEmail : NSObject
/// Email Type
@property (nonatomic, copy) NSString * _Nullable emailType;
/// Email Address
@property (nonatomic, copy) NSString * _Nullable email;
/// This boolean value flags the current email address as the primary email address or not.
@property (nonatomic) BOOL isPrimary;
/// This boolean value flags the current email address is verified or not.
@property (nonatomic) BOOL verified;
/// Allows client to initial the instance.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class contains the user phone number
SWIFT_CLASS("_TtC14PlayformSDK_TV16UserProfilePhone")
@interface UserProfilePhone : NSObject
/// Phone Type
@property (nonatomic, copy) NSString * _Nullable phoneType;
/// Phone Number
@property (nonatomic, copy) NSString * _Nullable phoneNumber;
/// This boolean value flags the current phone number as the primary phone number or not.
@property (nonatomic) BOOL isPrimary;
/// Allows client to initial the instance.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ViewType) {
  ViewTypeActivationView = 0,
  ViewTypeActivationViewWithPendingAgreementMessage = 1,
  ViewTypeActivatonViewWithError = 2,
};

#pragma clang diagnostic pop
